import { Button } from "@/components/ui/button";
import { ArrowDown } from "lucide-react";
import { analytics } from "../services/analyticsService";

const HeroSection = () => {
  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
      analytics.trackScrollToSection(sectionId);
      console.log(`üìç Scrolled to section: ${sectionId}`);
    }
  };

  const handleDownload = () => {
    analytics.trackDownload('master-blueprint.md');
    analytics.trackButtonClick('download-blueprint', 'hero');
    
    const blueprintContent = `
# NoCodeLos Blueprint Stack Master Template

## Core Methodology
This template provides the complete framework for building production-ready applications using AI-powered prompts and systematic development approaches.

## 1. Project Structure Template
\`\`\`
src/
‚îú‚îÄ‚îÄ components/          # Reusable UI components
‚îÇ   ‚îú‚îÄ‚îÄ ui/             # Base design system components
‚îÇ   ‚îú‚îÄ‚îÄ forms/          # Form-specific components
‚îÇ   ‚îî‚îÄ‚îÄ layout/         # Layout and navigation
‚îú‚îÄ‚îÄ services/           # API and external service integrations
‚îú‚îÄ‚îÄ hooks/              # Custom React hooks
‚îú‚îÄ‚îÄ utils/              # Utility functions and helpers
‚îî‚îÄ‚îÄ types/              # TypeScript type definitions
\`\`\`

## 2. Component Architecture Principles
- Single Responsibility: Each component has one clear purpose
- Composition over Inheritance: Build complex UIs from simple components
- Props Interface: Always define TypeScript interfaces for props
- Error Boundaries: Implement error handling at component level

## 3. State Management Strategy
- Local State: useState for component-specific data
- Global State: Context API or Zustand for shared state
- Server State: React Query for API data management
- Form State: React Hook Form for complex forms

## 4. Prompt Engineering Templates

### Basic App Prompt Template:
\`\`\`
Build a [APP_TYPE] using React and TypeScript with:

Core Features:
- [FEATURE_1]
- [FEATURE_2]
- [FEATURE_3]

Technical Requirements:
- Responsive design with Tailwind CSS
- Component-based architecture
- TypeScript interfaces
- Error handling and loading states

Data Integration:
- [DATA_SOURCE] integration
- Proper error handling
- Loading indicators

UI/UX Guidelines:
- Modern, clean interface
- Consistent spacing and typography
- Accessibility considerations
- Mobile-first approach
\`\`\`

## 5. Quality Checklist
‚ñ° Responsive design implemented
‚ñ° TypeScript interfaces defined
‚ñ° Error states handled
‚ñ° Loading states implemented
‚ñ° Accessibility features added
‚ñ° Performance optimized
‚ñ° Code properly documented

## 6. Deployment Strategy
1. Code review and testing
2. Performance audit
3. Accessibility testing
4. Cross-browser testing
5. Production deployment
6. Monitoring and analytics setup

## 7. Advanced Patterns
- Custom hooks for reusable logic
- Context providers for global state
- Higher-order components for shared behavior
- Render props for flexible composition

---

This blueprint serves as your foundation for any project. Customize it based on your specific requirements and maintain consistency across all builds.

Generated by NoCodeLos Blueprint Stack
Visit: https://nocodelos.com
    `;

    const blob = new Blob([blueprintContent], { type: 'text/markdown' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'nocodelos-master-blueprint.md';
    a.click();
    URL.revokeObjectURL(url);
    
    console.log('üì• Master Blueprint downloaded');
  };

  const handleWatchSeries = () => {
    analytics.trackSocialClick('youtube');
    analytics.trackButtonClick('watch-series', 'hero');
    
    window.open('https://youtube.com/playlist?list=PLbVHz4urQBZkJiAWdG8HWoJTdgEysigIO', '_blank');
    console.log('üé• Opening YouTube build series');
  };

  const handlePromptGenerator = () => {
    analytics.trackButtonClick('prompt-generator', 'hero');
    scrollToSection('interactive-demo');
  };

  return (
    <section className="relative min-h-screen flex items-center justify-center bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white overflow-hidden">
      {/* Background Animation */}
      <div className="absolute inset-0 bg-[url('data:image/svg+xml,%3Csvg%20width=%2260%22%20height=%2260%22%20viewBox=%220%200%2060%2060%22%20xmlns=%22http://www.w3.org/2000/svg%22%3E%3Cg%20fill=%22none%22%20fill-rule=%22evenodd%22%3E%3Cg%20fill=%22%239C92AC%22%20fill-opacity=%220.1%22%3E%3Ccircle%20cx=%2230%22%20cy=%2230%22%20r=%224%22/%3E%3C/g%3E%3C/g%3E%3C/svg%3E')] animate-pulse"></div>
      
      {/* Lovable Watermark */}
      <div className="absolute top-8 right-8 text-purple-300/50 text-sm font-medium">
        Built with Lovable ‚ö°
      </div>

      <div className="container mx-auto px-6 text-center relative z-10">
        <div className="max-w-5xl mx-auto">
          {/* Main Headline */}
          <h1 className="text-6xl md:text-7xl font-black mb-8 leading-tight">
            <span className="bg-gradient-to-r from-purple-400 via-pink-400 to-blue-400 bg-clip-text text-transparent">
              This Page Was Built
            </span>
            <br />
            <span className="text-white">in Lovable.</span>
            <br />
            <span className="text-2xl md:text-3xl font-normal text-purple-300">
              Now Learn How to Build Like This.
            </span>
          </h1>

          {/* Subheadline */}
          <p className="text-xl md:text-2xl text-gray-300 mb-12 max-w-4xl mx-auto leading-relaxed">
            Build full-stack AI apps faster and cheaper‚Äîwith no code, no dev teams, and zero friction. 
            I developed the <span className="text-purple-400 font-semibold">NoCodeLos Blueprint Stack</span> to replace 
            outdated PRDs. It's a complete, actionable system, and this page is living proof.
          </p>

          {/* CTA Buttons */}
          <div className="flex flex-col sm:flex-row gap-6 justify-center items-center mb-16">
            <Button 
              onClick={handlePromptGenerator}
              size="lg" 
              className="bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 text-white px-8 py-4 text-lg font-semibold rounded-full shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
            >
              üß† Try the Prompt Generator
            </Button>
            <Button 
              onClick={handleDownload}
              variant="outline" 
              size="lg"
              className="border-purple-400 text-purple-400 hover:bg-purple-400 hover:text-white px-8 py-4 text-lg font-semibold rounded-full transition-all duration-300"
            >
              üìê Download the Master Blueprint
            </Button>
            <Button 
              onClick={handleWatchSeries}
              variant="ghost" 
              size="lg"
              className="text-gray-300 hover:text-white px-8 py-4 text-lg font-semibold rounded-full border border-gray-600 hover:border-gray-400 transition-all duration-300"
            >
              üé• Watch the Build Series
            </Button>
          </div>

          {/* Scroll Indicator */}
          <div 
            className="animate-bounce cursor-pointer"
            onClick={() => scrollToSection('problem-section')}
          >
            <ArrowDown className="w-8 h-8 text-purple-400 mx-auto" />
          </div>
        </div>
      </div>

      {/* Floating Elements */}
      <div className="absolute top-20 left-20 w-20 h-20 bg-purple-500/20 rounded-full blur-xl animate-pulse"></div>
      <div className="absolute bottom-20 right-20 w-32 h-32 bg-pink-500/20 rounded-full blur-xl animate-pulse delay-1000"></div>
    </section>
  );
};

export default HeroSection;
